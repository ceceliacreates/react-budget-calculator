{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","Step1","this","props","currentStep","react_default","a","createElement","className","htmlFor","id","type","onChange","handleChange","React","Component","Step2","Step3","onClick","handleSubmit","Calculator","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","name","income","rate","housing","utilities","groceries","insurance","debt","care","food","shopping","entertainment","_next","bind","assertThisInitialized","_prev","setState","event","target","value","document","getElementById","concat","defineProperty","preventDefault","_this$state","alert","Fragment","src_Step1","src_Step2","src_Step3","class","previousButton","nextButton","ReactDOM","render","src_Calculator","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d3a34ba0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nclass Step1 extends React.Component {\n  render() {\n    if (this.props.currentStep !== 1) {\n      return null;\n    }\n    return (\n      <div className=\"form\">\n          <h5>Let's start with the basics.</h5>\n        <label htmlFor=\"name\">What is your name?</label>\n        <input\n          id=\"name\"\n          type=\"text\"\n          //value={this.props.name}\n          onChange={this.props.handleChange}\n        />\n        <label htmlFor=\"income\">\n          What is your monthly take-home (after tax) income?\n        </label>\n        <input\n          id=\"income\"\n          type=\"number\"\n          //value={this.props.income}\n          onChange={this.props.handleChange}\n        />\n        <label htmlFor=\"rate\">\n          How much of your income would you like to save? Enter as a decimal.\n          For example, enter .20 for 20%.\n        </label>\n        <input\n          id=\"rate\"\n          type=\"number\"\n          //value={this.props.rate}\n          onChange={this.props.handleChange}\n        />\n      </div>\n    );\n  }\n}\n\nclass Step2 extends React.Component {\n  render() {\n    if (this.props.currentStep !== 2) {\n      return null;\n    }\n    return (\n      <div className=\"form\">\n        <h5>\n          Now we'll look at your essential expenses. These are all on a\n          monthly basis.\n        </h5>\n        <label htmlFor=\"housing\">\n          What is your total housing payment? If you own, include any taxes,\n          PMI, or condo fees.\n        </label>\n        <input\n          id=\"housing\"\n          type=\"number\"\n          //value={this.props.housing}\n          onChange={this.props.handleChange}\n        />\n        <label htmlFor=\"utilities\">\n          How much do you spend on utilities? Include internet and cell phone if\n          you consider these essential expenses -- I know I do!\n        </label>\n        <input\n          id=\"utilities\"\n          type=\"number\"\n          //value={this.props.utilities}\n          onChange={this.props.handleChange}\n        />\n        <label htmlFor=\"groceries\">How much do you spend on groceries?</label>\n        <input\n          id=\"groceries\"\n          type=\"number\"\n          //value={this.props.groceries}\n          onChange={this.props.handleChange}\n        />\n        <label htmlFor=\"insurance\">\n          How much do you spend on renter/homeowner, auto, health, life, and\n          other insurances? Do not include any deducted from\n          your paycheck.\n        </label>\n        <input\n          id=\"insurance\"\n          type=\"number\"\n          //value={this.props.insurance}\n          onChange={this.props.handleChange}\n        />\n        <label htmlFor=\"debt\">\n          What is your total minimum debt payment? Include any car\n          payments, student loans, personal loans, and minimum credit card\n          payments.\n        </label>\n        <input\n          id=\"debt\"\n          type=\"number\"\n          //value={this.props.debt}\n          onChange={this.props.handleChange}\n        />\n        <label htmlFor=\"care\">\n          How much do you spend on child, pet, or other care?\n        </label>\n        <input\n          id=\"care\"\n          type=\"number\"\n          //value={this.props.care}\n          onChange={this.props.handleChange}\n        />\n      </div>\n    );\n  }\n}\n\nclass Step3 extends React.Component {\n  render() {\n    if (this.props.currentStep !== 3) {\n      return null;\n    }\n    return (\n      <div className=\"form\">\n        <h5>\n          Now we'll add up your discretionary expenses. These can change from\n          month to month, so go with an average or goal.\n        </h5>\n        <label htmlFor=\"food\">\n          How much do you spend at restaurants, fast food, coffee shops, and\n          bars?\n        </label>\n        <input\n          id=\"food\"\n          type=\"number\"\n          //value={this.props.food}\n          onChange={this.props.handleChange}\n        />\n        <label htmlFor=\"shopping\">\n          What about shopping? This refers to ALL shopping, including personal\n          items like toiletries, gifts for others, clothes, etc.\n        </label>\n        <input\n          id=\"shopping\"\n          type=\"number\"\n          //value={this.props.shopping}\n          onChange={this.props.handleChange}\n        />\n        <label htmlFor=\"entertainment\">\n          And finally, what do you spend on entertainment? Include movies, video\n          games, subscriptions lik Spotify and Netflix, concerts, sports events,\n          etc.\n        </label>\n        <input\n          id=\"entertainment\"\n          type=\"number\"\n          //value={this.props.entertainment}\n          onChange={this.props.handleChange}\n        />\n        <button onClick={this.props.handleSubmit}>Check Your Budget</button>\n      </div>\n    );\n  }\n}\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentStep: 1,\n      name: \"\",\n      income: \"\",\n      rate: \"\",\n      housing: \"\",\n      utilities: \"\",\n      groceries: \"\",\n      insurance: \"\",\n      debt: \"\",\n      care: \"\",\n      food: \"\",\n      shopping: \"\",\n      entertainment: \"\"\n    };\n    this._next = this._next.bind(this);\n    this._prev = this._prev.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  _next() {\n      let currentStep = this.state.currentStep;\n      currentStep = currentStep >= 2? 3 : currentStep + 1;\n      this.setState({\n          currentStep: currentStep\n      })\n  }\n  _prev() {\n      let currentStep = this.state.currentStep;\n      currentStep = currentStep <= 1? 1 : currentStep - 1;\n      this.setState({\n          currentStep: currentStep\n      })\n  }\n  handleChange(event) {\n    const name = event.target.id;\n    const value = document.getElementById(`${name}`).value;\n    this.setState({\n     [name]: value\n    });\n  }\n  handleSubmit(event) {\n    event.preventDefault();\n    const {\n      name,\n      income,\n      rate,\n      housing,\n      utilities,\n      groceries,\n      insurance,\n      debt,\n      care,\n      food,\n      shopping,\n      entertainment\n    } = this.state;\n    alert(\n      `Okay, ${name}, with an income of ${income} and a savings rate of ${rate}, you are spending ${housing} on housing, ${utilities} on utilities, ${groceries} on groceries, ${insurance} on insurance, ${debt} on debt, ${care} on care, ${food} on food, ${shopping} on shopping, and ${entertainment} on entertainment.`\n    );\n  }\n  get previousButton() {\n      let currentStep = this.state.currentStep;\n      if(currentStep !==1) {\n          return (\n              <button id=\"back\" onClick={this._prev}>Back</button>\n          )\n      }\n      return null;\n  }\n  get nextButton() {\n      let currentStep = this.state.currentStep;\n      if(currentStep <3) {\n          return(\n              <button id=\"next\" onClick={this._next}>Next</button>\n          )\n      }\n      return null;\n  }\n  render() {\n      return (\n    <React.Fragment>\n      <h1>Budget Calculator</h1>\n      <p>Step {this.state.currentStep}</p>\n      <Step1\n        currentStep={this.state.currentStep}\n        handleChange={this.handleChange}\n        name={this.state.name}\n        income={this.state.income}\n        rate={this.state.rate}\n      />\n\n      <Step2\n        currentStep={this.state.currentStep}\n        handleChange={this.handleChange}\n        housing={this.state.housing}\n        utilities={this.state.utilities}\n        groceries={this.state.groceries}\n        insurance={this.state.insurance}\n        debt={this.state.debt}\n        care={this.state.care}\n      />\n\n      <Step3\n        currentStep={this.state.currentStep}\n        handleChange={this.handleChange}\n        handleSubmit={this.handleSubmit}\n        food={this.state.food}\n        shopping={this.state.shopping}\n        entertainment={this.state.entertainment}\n      />\n        <div class=\"buttons\">\n        {this.previousButton}\n      {this.nextButton}\n      </div>\n    </React.Fragment>\n      )\n  }\n}\n\nReactDOM.render(<Calculator />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}